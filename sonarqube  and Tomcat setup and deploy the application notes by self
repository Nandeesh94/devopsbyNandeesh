1.setup external first.
Go to Jenkins > Manage Jenkins >  plugins > avilabel plugins.
SonarQube_scanner Plugin installed:

2.SonarQube Configuration in Jenkins:
Go to Jenkins > Manage Jenkins > Configure System.
Scroll to the SonarQube Servers section and add your SonarQube server details. Name it (e.g., "SonarQube").
Environment Variables:
Name <your-sonarqube-server-name>
Server URL <your-sonarqube-server-ip> 
=======================================================================================
                                                     #Replace <your-sonarqube-token> with the token generated from your SonarQube dashboard.
                                                     #Ensure that the SonarScanner for Jenkins plugin is installed on your Jenkins instance.
                                                     #Maven Configuration:
                                                     #Ensure the sonar-maven-plugin is included in your Maven pom.xml or your Maven version supports SonarQube.
===========================================================================================================

pipeline {
    agent {
        label 'slave1'

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/Nandeesh94/jenkins-java-project.git'
            }
        }
        stage('Build') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                sh 'mvn sonar:sonar \
                  -Dsonar.projectKey=netflix \
                  -Dsonar.host.url=http://54.83.109.174:9000 \
                  -Dsonar.login=5b6e84ca2dc037e547d3b62cbd515e5bd960a7f3'
            }
        }
        stage('Package Artifact') {
            steps {
                sh 'mvn clean package'
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed!'
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}



====================================================================================================================================

Tomcat setup and deploy the application.

pipeline {
    agent {
        label 'slave3'
    }
    
    stages {
        stage('checkout') {
            steps {
                git 'https://github.com/Nandeesh94/jenkins-java-project.git'
            }
        }
        stage('build') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('code-quality') {
            steps {
                sh '''mvn sonar:sonar \
                    -Dsonar.projectKey=netflix1 \
                    -Dsonar.host.url=http://54.196.189.97:9000 \
                    -Dsonar.login=180ca38d5576c525d78c6b67ef4498ebcce63b91'''
            }
        }
        stage('artifact') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('deploy') {
            steps {
                deploy(
                    adopters: [
                        tomcat9(
                            credentialsId: '849e764e-9850-44e8-b0c4-cfb48bdfcba6',
                            path: '',
                            url: 'http://174.129.66.68:8081/'
                        )
                    ],
                    contextPath: 'Netflix1',
                    war: 'target/*.war'
                )
            }
        }
    }
}




